# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'trap_mainwindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets 
from PyQt5.QtWidgets import QMessageBox,QDial,QVBoxLayout,QApplication, QMainWindow, QWidget, QVBoxLayout , QFileDialog
from pyqtgraph import PlotWidget, plot
from PyQt5.QtCore import QDate,QTime,QDateTime,QTimer
import time
from PyQt5.QtGui import QPixmap
import os
import pandas as pd
import serial
import threading
from window2 import Ui_SerialWindow
from serial import SerialException

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        self.msg=QMessageBox()
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1011, 810)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(130, 150, 211, 31))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(110, 105, 211, 31))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(130, 200, 211, 31))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.label_8 = QtWidgets.QLabel(self.centralwidget)
        self.label_8.setGeometry(QtCore.QRect(40, 157, 71, 20))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_8.setFont(font)
        self.label_8.setObjectName("label_8")
        self.label_9 = QtWidgets.QLabel(self.centralwidget)
        self.label_9.setGeometry(QtCore.QRect(40, 207, 71, 20))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_9.setFont(font)
        self.label_9.setObjectName("label_9")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(130, 250, 211, 31))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.label_10 = QtWidgets.QLabel(self.centralwidget)
        self.label_10.setGeometry(QtCore.QRect(40, 257, 71, 20))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_10.setFont(font)
        self.label_10.setObjectName("label_10")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(130, 300, 211, 31))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.label_11 = QtWidgets.QLabel(self.centralwidget)
        self.label_11.setGeometry(QtCore.QRect(40, 307, 71, 20))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_11.setFont(font)
        self.label_11.setObjectName("label_11")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(130, 350, 211, 31))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.label_12 = QtWidgets.QLabel(self.centralwidget)
        self.label_12.setGeometry(QtCore.QRect(40, 357, 71, 20))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_12.setFont(font)
        self.label_12.setObjectName("label_12")
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(130, 400, 211, 31))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_7.setFont(font)
        self.label_7.setObjectName("label_7")
        self.label_13 = QtWidgets.QLabel(self.centralwidget)
        self.label_13.setGeometry(QtCore.QRect(40, 407, 71, 20))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_13.setFont(font)
        self.label_13.setObjectName("label_13")
        self.label_14 = QtWidgets.QLabel(self.centralwidget)
        self.label_14.setGeometry(QtCore.QRect(130, 450, 211, 31))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_14.setFont(font)
        self.label_14.setObjectName("label_14")
        self.label_15 = QtWidgets.QLabel(self.centralwidget)
        self.label_15.setGeometry(QtCore.QRect(40, 457, 71, 20))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_15.setFont(font)
        self.label_15.setObjectName("label_15")
        self.label_16 = QtWidgets.QLabel(self.centralwidget)
        self.label_16.setGeometry(QtCore.QRect(130, 500, 211, 31))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_16.setFont(font)
        self.label_16.setObjectName("label_16")
        self.label_17 = QtWidgets.QLabel(self.centralwidget)
        self.label_17.setGeometry(QtCore.QRect(40, 507, 71, 20))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_17.setFont(font)
        self.label_17.setObjectName("label_17")
        self.label_18 = QtWidgets.QLabel(self.centralwidget)
        self.label_18.setGeometry(QtCore.QRect(40, 110, 71, 20))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_18.setFont(font)
        self.label_18.setObjectName("label_18")
        self.label_19 = QtWidgets.QLabel(self.centralwidget)
        self.label_19.setGeometry(QtCore.QRect(130, 550, 211, 31))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_19.setFont(font)
        self.label_19.setObjectName("label_19")
        self.label_21 = QtWidgets.QLabel(self.centralwidget)
        self.label_21.setGeometry(QtCore.QRect(40, 557, 71, 20))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_21.setFont(font)
        self.label_21.setObjectName("label_21")
        self.label_23 = QtWidgets.QLabel(self.centralwidget)
        self.label_23.setGeometry(QtCore.QRect(130, 600, 211, 31))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_23.setFont(font)
        self.label_23.setObjectName("label_23")
        self.label_24 = QtWidgets.QLabel(self.centralwidget)
        self.label_24.setGeometry(QtCore.QRect(130, 650, 211, 31))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_24.setFont(font)
        self.label_24.setObjectName("label_24")
        self.label_25 = QtWidgets.QLabel(self.centralwidget)
        self.label_25.setGeometry(QtCore.QRect(40, 607, 81, 20))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_25.setFont(font)
        self.label_25.setObjectName("label_25")
        self.label_26 = QtWidgets.QLabel(self.centralwidget)
        self.label_26.setGeometry(QtCore.QRect(40, 657, 71, 20))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_26.setFont(font)
        self.label_26.setObjectName("label_26")
        self.label_27 = QtWidgets.QLabel(self.centralwidget)
        self.label_27.setGeometry(QtCore.QRect(40, 707, 81, 20))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_27.setFont(font)
        self.label_27.setObjectName("label_27")
        self.label_28 = QtWidgets.QLabel(self.centralwidget)
        self.label_28.setGeometry(QtCore.QRect(130, 700, 211, 31))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_28.setFont(font)
        self.label_28.setObjectName("label_28")
        self.label_20 = QtWidgets.QLabel(self.centralwidget)
        self.label_20.setGeometry(QtCore.QRect(30, 30, 331, 51))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.label_20.setFont(font)
        self.label_20.setObjectName("label_20")
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setGeometry(QtCore.QRect(20, 90, 331, 701))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setBold(True)
        font.setWeight(75)
        self.groupBox.setFont(font)
        self.groupBox.setTitle("")
        self.groupBox.setObjectName("groupBox")
        self.label_29 = QtWidgets.QLabel(self.groupBox)
        self.label_29.setGeometry(QtCore.QRect(110, 658, 211, 31))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_29.setFont(font)
        self.label_29.setObjectName("label_29")
        self.label_30 = QtWidgets.QLabel(self.groupBox)
        self.label_30.setGeometry(QtCore.QRect(15, 664, 91, 20))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.label_30.setFont(font)
        self.label_30.setObjectName("label_30")
        self.groupBox_2 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_2.setGeometry(QtCore.QRect(20, 21, 691, 71))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.groupBox_2.setFont(font)
        self.groupBox_2.setTitle("")
        self.groupBox_2.setObjectName("groupBox_2")
        self.groupBox_3 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_3.setGeometry(QtCore.QRect(710, 21, 281, 71))
        self.groupBox_3.setTitle("")
        self.groupBox_3.setObjectName("groupBox_3")
        self.SerialSettingBtn = QtWidgets.QPushButton(self.groupBox_3)
        self.SerialSettingBtn.setGeometry(QtCore.QRect(20, 10, 111, 51))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setBold(True)
        font.setWeight(75)
        self.SerialSettingBtn.setFont(font)
        self.SerialSettingBtn.setObjectName("SerialSettingBtn")
        self.SerialConnectBtn = QtWidgets.QPushButton(self.groupBox_3)
        self.SerialConnectBtn.setGeometry(QtCore.QRect(150, 10, 111, 51))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setBold(True)
        font.setWeight(75)
        self.SerialConnectBtn.setFont(font)
        self.SerialConnectBtn.setObjectName("SerialConnectBtn")
        self.groupBox_4 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_4.setGeometry(QtCore.QRect(710, 90, 281, 51))
        self.groupBox_4.setTitle("")
        self.groupBox_4.setObjectName("groupBox_4")
        self.GyroCheckBtn = QtWidgets.QPushButton(self.groupBox_4)
        self.GyroCheckBtn.setGeometry(QtCore.QRect(200, 10, 71, 31))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setBold(True)
        font.setWeight(75)
        self.GyroCheckBtn.setFont(font)
        self.GyroCheckBtn.setObjectName("GyroCheckBtn")
        self.label_31 = QtWidgets.QLabel(self.groupBox_4)
        self.label_31.setGeometry(QtCore.QRect(20, 0, 171, 51))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_31.setFont(font)
        self.label_31.setObjectName("label_31")
        self.groupBox_6 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_6.setGeometry(QtCore.QRect(710, 140, 281, 171))
        self.groupBox_6.setTitle("")
        self.groupBox_6.setObjectName("groupBox_6")
        self.label_34 = QtWidgets.QLabel(self.groupBox_6)
        self.label_34.setGeometry(QtCore.QRect(20, 10, 161, 31))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_34.setFont(font)
        self.label_34.setObjectName("label_34")
        self.label_35 = QtWidgets.QLabel(self.groupBox_6)
        self.label_35.setGeometry(QtCore.QRect(20, 50, 161, 31))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_35.setFont(font)
        self.label_35.setObjectName("label_35")
        
        self.label_36 = QtWidgets.QLabel(self.groupBox_6)
        self.label_36.setGeometry(QtCore.QRect(20, 90, 161, 31))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_36.setFont(font)
        self.label_36.setObjectName("label_36")
        
        self.label_43 = QtWidgets.QLabel(self.groupBox_6)
        self.label_43.setGeometry(QtCore.QRect(20, 130, 161, 31))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_43.setFont(font)
        self.label_43.setObjectName("label_43")
        
        self.GetFileNameBtn = QtWidgets.QPushButton(self.groupBox_6)
        self.GetFileNameBtn.setGeometry(QtCore.QRect(200, 10, 71, 31))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setBold(True)
        font.setWeight(75)
        self.GetFileNameBtn.setFont(font)
        self.GetFileNameBtn.setObjectName("GetFileNameBtn")
        
        self.DeleteFileBtn = QtWidgets.QPushButton(self.groupBox_6)
        self.DeleteFileBtn.setGeometry(QtCore.QRect(200, 130, 71, 31))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setBold(True)
        font.setWeight(75)
        self.DeleteFileBtn.setFont(font)
        self.DeleteFileBtn.setObjectName("DeleteFileBtn")
        
        self.SetFilePathBtn = QtWidgets.QPushButton(self.groupBox_6)
        self.SetFilePathBtn.setGeometry(QtCore.QRect(200, 50, 71, 31))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setBold(True)
        font.setWeight(75)
        self.SetFilePathBtn.setFont(font)
        self.SetFilePathBtn.setObjectName("SetFilePathBtn")
        self.FileDownloadBtn = QtWidgets.QPushButton(self.groupBox_6)
        self.FileDownloadBtn.setGeometry(QtCore.QRect(200, 90, 71, 31))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setBold(True)
        font.setWeight(75)
        self.FileDownloadBtn.setFont(font)
        self.FileDownloadBtn.setObjectName("FileDownloadBtn")
        self.groupBox_7 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_7.setGeometry(QtCore.QRect(710, 410, 281, 131))
        self.groupBox_7.setTitle("")
        self.groupBox_7.setObjectName("groupBox_7")
        self.label_37 = QtWidgets.QLabel(self.groupBox_7)
        self.label_37.setGeometry(QtCore.QRect(20, 0, 241, 31))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_37.setFont(font)
        self.label_37.setObjectName("label_37")
        """self.label_38 = QtWidgets.QLabel(self.groupBox_7)
        self.label_38.setGeometry(QtCore.QRect(10, 100, 251, 31))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_38.setFont(font)
        self.label_38.setObjectName("label_38")"""
        
        self.label_41 = QtWidgets.QLabel(self.groupBox_7)
        self.label_41.setGeometry(QtCore.QRect(10, 90, 251, 31))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_41.setFont(font)
        self.label_41.setObjectName("label_41")
        
        self.CWLineEdit = QtWidgets.QLineEdit(self.groupBox_7)
        self.CWLineEdit.setGeometry(QtCore.QRect(20, 45, 91, 31))
        self.CWLineEdit.setObjectName("CWLineEdit")
        
        
        """
        self.CCWLineEdit = QtWidgets.QLineEdit(self.groupBox_7)
        self.CCWLineEdit.setGeometry(QtCore.QRect(20, 140, 91, 31))
        self.CCWLineEdit.setObjectName("CCWLineEdit")
        """
        
        self.SimMotorBtn = QtWidgets.QPushButton(self.groupBox_7)
        self.SimMotorBtn.setGeometry(QtCore.QRect(190,90,81,31))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setBold(True)
        font.setWeight(75)
        self.SimMotorBtn.setFont(font)
        self.SimMotorBtn.setObjectName("SimMotorBtn")
        
        #self.CWMotorOnBtn = QtWidgets.QPushButton(self.groupBox_7)
        #self.CWMotorOnBtn.setGeometry(QtCore.QRect(120, 50, 71, 31))
        #font = QtGui.QFont()
        #font.setFamily("맑은 고딕")
        #font.setBold(True)
        #font.setWeight(75)
        #self.CWMotorOnBtn.setFont(font)
        #self.CWMotorOnBtn.setObjectName("CWMotorOnBtn")
        #self.CWMotorOffBtn = QtWidgets.QPushButton(self.groupBox_7)
        #self.CWMotorOffBtn.setGeometry(QtCore.QRect(200, 50, 71, 31))
        #font = QtGui.QFont()
        #font.setFamily("맑은 고딕")
        #font.setBold(True)
        #font.setWeight(75)
        #self.CWMotorOffBtn.setFont(font)
        #self.CWMotorOffBtn.setObjectName("CWMotorOffBtn")
        #self.CCWMotorOnBtn = QtWidgets.QPushButton(self.groupBox_7)
        #self.CCWMotorOnBtn.setGeometry(QtCore.QRect(120, 140, 71, 31))
        #font = QtGui.QFont()
        #font.setFamily("맑은 고딕")
        #font.setBold(True)
        #font.setWeight(75)
        #self.CCWMotorOnBtn.setFont(font)
        #self.CCWMotorOnBtn.setObjectName("CCWMotorOnBtn")
        #self.CCWMotorOffBtn = QtWidgets.QPushButton(self.groupBox_7)
        #self.CCWMotorOffBtn.setGeometry(QtCore.QRect(200, 140, 71, 31))
        #font = QtGui.QFont()
        #font.setFamily("맑은 고딕")
        #font.setBold(True)
        #font.setWeight(75)
        #self.CCWMotorOffBtn.setFont(font)
        #self.CCWMotorOffBtn.setObjectName("CCWMotorOffBtn")
        self.groupBox_8 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_8.setGeometry(QtCore.QRect(710, 540, 281, 251))
        self.groupBox_8.setTitle("")
        self.groupBox_8.setObjectName("groupBox_8")
        self.label_22 = QtWidgets.QLabel(self.groupBox_8)
        self.label_22.setGeometry(QtCore.QRect(10, 10, 111, 31))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.label_22.setFont(font)
        self.label_22.setObjectName("label_22")
        self.lineEdit_3 = QtWidgets.QLineEdit(self.groupBox_8)
        self.lineEdit_3.setGeometry(QtCore.QRect(130, 10, 81, 31))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.lineEdit_3.setFont(font)
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.pushButton_4 = QtWidgets.QPushButton(self.groupBox_8)
        self.pushButton_4.setGeometry(QtCore.QRect(220, 10, 51, 31))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_4.setFont(font)
        self.pushButton_4.setObjectName("pushButton_4")
        self.comboBox_2 = QtWidgets.QComboBox(self.groupBox_8)
        self.comboBox_2.setGeometry(QtCore.QRect(10, 75, 111, 31))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.comboBox_2.setFont(font)
        self.comboBox_2.setObjectName("comboBox_2")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.groupBox_8)
        self.lineEdit_2.setGeometry(QtCore.QRect(130, 75, 81, 31))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.lineEdit_2.setFont(font)
        self.lineEdit_2.setObjectName("lineEdit_2")
        
        self.lineEdit_4 = QtWidgets.QLineEdit(self.groupBox_8)
        self.lineEdit_4.setGeometry(QtCore.QRect(140, 140, 71, 31))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.lineEdit_4.setFont(font)
        self.lineEdit_4.setObjectName("lineEdit_4")
        
        """
        self.lineEdit_5 = QtWidgets.QLineEdit(self.groupBox_8)
        self.lineEdit_5.setGeometry(QtCore.QRect(140, 150, 71, 31))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.lineEdit_5.setFont(font)
        self.lineEdit_5.setObjectName("lineEdit_5")
        """
        
        self.pushButton = QtWidgets.QPushButton(self.groupBox_8)
        self.pushButton.setGeometry(QtCore.QRect(220, 75, 51, 31))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton.setFont(font)
        self.pushButton.setObjectName("pushButton")
        self.label_39 = QtWidgets.QLabel(self.groupBox_8)
        self.label_39.setGeometry(QtCore.QRect(10, 140, 111, 31))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.label_39.setFont(font)
        self.label_39.setObjectName("label_39")
        #self.label_40 = QtWidgets.QLabel(self.groupBox_8)
        #self.label_40.setGeometry(QtCore.QRect(10, 150, 121, 31))
        #font = QtGui.QFont()
        #font.setFamily("맑은 고딕")
        #font.setPointSize(11)
        #font.setBold(True)
        #font.setWeight(75)
        #self.label_40.setFont(font)
        #self.label_40.setObjectName("label_40")
        self.CWPWMConfigBtn = QtWidgets.QPushButton(self.groupBox_8)
        self.CWPWMConfigBtn.setGeometry(QtCore.QRect(220, 140, 51, 31))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.CWPWMConfigBtn.setFont(font)
        self.CWPWMConfigBtn.setObjectName("CWPWMConfigBtn")
        
        """
        self.CCWPWMConfigBtn = QtWidgets.QPushButton(self.groupBox_8)
        self.CCWPWMConfigBtn.setGeometry(QtCore.QRect(220, 150, 51, 31))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.CCWPWMConfigBtn.setFont(font)
        self.CCWPWMConfigBtn.setObjectName("CCWPWMConfigBtn")
        """
        
        self.ConfigSaveBtn = QtWidgets.QPushButton(self.groupBox_8)
        self.ConfigSaveBtn.setGeometry(QtCore.QRect(150, 190, 101, 51))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.ConfigSaveBtn.setFont(font)
        self.ConfigSaveBtn.setObjectName("ConfigSaveBtn")
        self.ConfigCheckBtn = QtWidgets.QPushButton(self.groupBox_8)
        self.ConfigCheckBtn.setGeometry(QtCore.QRect(30, 190, 101, 51))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.ConfigCheckBtn.setFont(font)
        self.ConfigCheckBtn.setObjectName("ConfigCheckBtn")
        self.groupBox_9 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_9.setGeometry(QtCore.QRect(710, 311, 281, 101))
        self.groupBox_9.setTitle("")
        self.groupBox_9.setObjectName("groupBox_9")
        self.label_32 = QtWidgets.QLabel(self.groupBox_9)
        self.label_32.setGeometry(QtCore.QRect(20, 10, 161, 31))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_32.setFont(font)
        self.label_32.setObjectName("label_32")
        self.label_33 = QtWidgets.QLabel(self.groupBox_9)
        self.label_33.setGeometry(QtCore.QRect(20, 60, 161, 31))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_33.setFont(font)
        self.label_33.setObjectName("label_33")
        self.NowTimeBtn = QtWidgets.QPushButton(self.groupBox_9)
        self.NowTimeBtn.setGeometry(QtCore.QRect(200, 10, 71, 31))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setBold(True)
        font.setWeight(75)
        self.NowTimeBtn.setFont(font)
        self.NowTimeBtn.setObjectName("NowTimeBtn")
        self.NowTimeUpdateBtn = QtWidgets.QPushButton(self.groupBox_9)
        self.NowTimeUpdateBtn.setGeometry(QtCore.QRect(200, 60, 71, 31))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setBold(True)
        font.setWeight(75)
        self.NowTimeUpdateBtn.setFont(font)
        self.NowTimeUpdateBtn.setObjectName("NowTimeUpdateBtn")
        self.groupBox_10 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_10.setGeometry(QtCore.QRect(350, 90, 361, 701))
        self.groupBox_10.setTitle("")
        self.groupBox_10.setObjectName("groupBox_10")
        self.listWidget = QtWidgets.QListWidget(self.groupBox_10)
        self.listWidget.setGeometry(QtCore.QRect(10, 10, 341, 681))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.listWidget.setFont(font)
        self.listWidget.setObjectName("listWidget")
        self.groupBox_2.raise_()
        self.groupBox.raise_()
        self.label.raise_()
        self.label_2.raise_()
        self.label_3.raise_()
        self.label_8.raise_()
        self.label_9.raise_()
        self.label_4.raise_()
        self.label_10.raise_()
        self.label_5.raise_()
        self.label_11.raise_()
        self.label_6.raise_()
        self.label_12.raise_()
        self.label_7.raise_()
        self.label_13.raise_()
        self.label_14.raise_()
        self.label_15.raise_()
        self.label_16.raise_()
        self.label_17.raise_()
        self.label_18.raise_()
        self.label_19.raise_()
        self.label_21.raise_()
        self.label_23.raise_()
        self.label_24.raise_()
        self.label_25.raise_()
        self.label_26.raise_()
        self.label_27.raise_()
        self.label_28.raise_()
        self.label_20.raise_()
        self.groupBox_3.raise_()
        self.groupBox_4.raise_()
        self.groupBox_6.raise_()
        self.groupBox_7.raise_()
        self.groupBox_8.raise_()
        self.groupBox_9.raise_()
        self.groupBox_10.raise_()
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)


        # 디지털 시계
        self.timer = QtCore.QTimer(MainWindow)
        self.timer.timeout.connect(self.time_out)
        self.timer.timeout.connect(self.time_out_2)
        self.timer.start(1000)
        
        self.ser_checking_num = 0

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # 버튼클릭함수
        self.pushButton_4.clicked.connect(self.delay_time)
        self.pushButton.clicked.connect(self.time_term)
        self.ConfigCheckBtn.clicked.connect(self.check_value)
        self.ConfigSaveBtn.clicked.connect(self.transfer_value)
        self.SerialSettingBtn.clicked.connect(self.serialport_window)
        self.SerialConnectBtn.clicked.connect(self.transfer_start)
        self.NowTimeBtn.clicked.connect(self.time_check)
        self.NowTimeUpdateBtn.clicked.connect(self.time_save)
        self.GetFileNameBtn.clicked.connect(self.data_name)
        self.DeleteFileBtn.clicked.connect(self.delete_file)
        self.SetFilePathBtn.clicked.connect(self.file_open)
        self.FileDownloadBtn.clicked.connect(self.th)
        self.GyroCheckBtn.clicked.connect(self.GyroCheck)
        #self.CWMotorOnBtn.clicked.connect(self.CW_Motor_Control)
        #self.CWMotorOffBtn.clicked.connect(self.CW_Motor_Stop)
        #self.CCWMotorOnBtn.clicked.connect(self.CCW_Motor_Control)
        #self.CCWMotorOffBtn.clicked.connect(self.CCW_Motor_Stop)
        self.SimMotorBtn.clicked.connect(self.SimMotor)
        self.CWPWMConfigBtn.clicked.connect(self.CWConfig)
        #self.CCWPWMConfigBtn.clicked.connect(self.CCWConfig)

        
        # 현재시간 맞추기
        currentTime = QDateTime.currentDateTime()
        timeDisplay = currentTime.toString('yyyy-MM-dd hh:mm:ss')
        self.label.setText(timeDisplay)
        self.label_3.setText(timeDisplay)
        self.label_4.setText(timeDisplay)
        self.label_5.setText(timeDisplay)
        self.label_6.setText(timeDisplay)
        self.label_7.setText(timeDisplay)
        self.label_14.setText(timeDisplay)
        self.label_16.setText(timeDisplay)
        self.label_19.setText(timeDisplay)
        self.label_23.setText(timeDisplay)
        self.label_24.setText(timeDisplay)
        self.label_28.setText(timeDisplay)
        self.label_29.setText(timeDisplay)
        
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "2022-05-26 00:00:00"))
        self.label_2.setText(_translate("MainWindow", "        START TIME"))
        self.label_3.setText(_translate("MainWindow", "2022-05-26 00:00:00"))
        self.label_8.setText(_translate("MainWindow", "CYCLE 1"))
        self.label_9.setText(_translate("MainWindow", "CYCLE 2"))
        self.label_4.setText(_translate("MainWindow", "2022-05-26 00:00:00"))
        self.label_10.setText(_translate("MainWindow", "CYCLE 3"))
        self.label_5.setText(_translate("MainWindow", "2022-05-26 00:00:00"))
        self.label_11.setText(_translate("MainWindow", "CYCLE 4"))
        self.label_6.setText(_translate("MainWindow", "2022-05-26 00:00:00"))
        self.label_12.setText(_translate("MainWindow", "CYCLE 5"))
        self.label_7.setText(_translate("MainWindow", "2022-05-26 00:00:00"))
        self.label_13.setText(_translate("MainWindow", "CYCLE 6"))
        self.label_14.setText(_translate("MainWindow", "2022-05-26 00:00:00"))
        self.label_15.setText(_translate("MainWindow", "CYCLE 7"))
        self.label_16.setText(_translate("MainWindow", "2022-05-26 00:00:00"))
        self.label_17.setText(_translate("MainWindow", "CYCLE 8"))
        self.label_18.setText(_translate("MainWindow", " CYCLE"))
        self.label_19.setText(_translate("MainWindow", "2022-05-26 00:00:00"))
        self.label_21.setText(_translate("MainWindow", "CYCLE 9"))
        self.label_23.setText(_translate("MainWindow", "2022-05-26 00:00:00"))
        self.label_24.setText(_translate("MainWindow", "2022-05-26 00:00:00"))
        self.label_25.setText(_translate("MainWindow", "CYCLE 10"))
        self.label_26.setText(_translate("MainWindow", "CYCLE 11"))
        self.label_27.setText(_translate("MainWindow", "CYCLE 12"))
        self.label_28.setText(_translate("MainWindow", "2022-05-26 00:00:00"))
        self.label_20.setText(_translate("MainWindow", "         2022-05-26 00:00:00"))
        self.label_29.setText(_translate("MainWindow", "2022-05-26 00:00:00"))
        self.label_30.setText(_translate("MainWindow", "CYCLE END"))
        self.SerialSettingBtn.setText(_translate("MainWindow", "시리얼 통신\n"
"설정"))
        self.SerialConnectBtn.setText(_translate("MainWindow", "시리얼 통신\n"
"연결"))
        self.GyroCheckBtn.setText(_translate("MainWindow", "확인"))
        self.label_31.setText(_translate("MainWindow", "자이로 센서 값 측정"))
        self.label_34.setText(_translate("MainWindow", "파일 이름 확인"))
        self.label_35.setText(_translate("MainWindow", "파일 경로 설정"))
        self.label_36.setText(_translate("MainWindow", "파일 다운로드"))
        self.label_43.setText(_translate("MainWindow", "파일 삭제"))
        self.DeleteFileBtn.setText(_translate("MainWindow","삭제"))
        self.GetFileNameBtn.setText(_translate("MainWindow", "확인"))
        self.SetFilePathBtn.setText(_translate("MainWindow", "확인"))
        self.FileDownloadBtn.setText(_translate("MainWindow", "확인"))
        self.label_37.setText(_translate("MainWindow", "시계방향-PWM 설정 (0~100%)"))
        #self.label_38.setText(_translate("MainWindow", "반시계방향-PWM 설정 (0~100%)"))
        self.label_41.setText(_translate("MainWindow", "Trap Rotate Simulation"))
        
        self.SimMotorBtn.setText(_translate("MainWindow", "Simulation"))
        #self.CWMotorOnBtn.setText(_translate("MainWindow", "On"))
        #self.CWMotorOffBtn.setText(_translate("MainWindow", "Off"))
        #self.CCWMotorOnBtn.setText(_translate("MainWindow", "On"))
        #self.CCWMotorOffBtn.setText(_translate("MainWindow", "Off"))
        self.label_22.setText(_translate("MainWindow", "DELAY MINUTE"))
        self.pushButton_4.setText(_translate("MainWindow", "저장"))
        self.comboBox_2.setItemText(0, _translate("MainWindow", "TIME TERM"))
        self.comboBox_2.setItemText(1, _translate("MainWindow", "DAY"))
        self.comboBox_2.setItemText(2, _translate("MainWindow", "HOUR"))
        self.comboBox_2.setItemText(3, _translate("MainWindow", "MINUTE"))
        self.pushButton.setText(_translate("MainWindow", "저장"))
        self.label_39.setText(_translate("MainWindow", "시계방향-PWM"))
        #self.label_40.setText(_translate("MainWindow", "반시계방향-PWM"))
        self.CWPWMConfigBtn.setText(_translate("MainWindow", "저장"))
        #self.CCWPWMConfigBtn.setText(_translate("MainWindow", "확인"))
        self.ConfigSaveBtn.setText(_translate("MainWindow", "Pico저장"))
        self.ConfigCheckBtn.setText(_translate("MainWindow", "설정값 확인"))
        self.label_32.setText(_translate("MainWindow", "현재 시간 확인"))
        self.label_33.setText(_translate("MainWindow", "현재 시간 업데이트"))
        self.NowTimeBtn.setText(_translate("MainWindow", "확인"))
        self.NowTimeUpdateBtn.setText(_translate("MainWindow", "확인"))
    
    def delete_file(self):
        try:
            self.ser.write(("delete_file").encode())
            time.sleep(0.5)
            txtname=self.listWidget.currentItem().text()
            #deletetxt=txtname.split("-")[0]
            deletetxt=txtname
            
            #print(deletetxt)
            self.ser.write(deletetxt.encode())
            #정말 삭제할꺼냐 물어보고 yes하면 txtname write 아니면 그냥 닫기
            self.msg.setIcon(QMessageBox.Information)
            self.msg.setWindowTitle('Delete Check')
            self.msg.setText('정말 삭제하시겠습니까?')
            self.msg.setStandardButtons(QMessageBox.Ok|QMessageBox.Cancel)
            retval=self.msg.exec_()
            
            if retval==QMessageBox.Ok:
                self.ser.write(deletetxt.encode())
                #print(deletetxt)
                self.removeItemRow = self.listWidget.currentRow()
                self.listWidget.takeItem(self.removeItemRow)
                #listwidget삭제
                now = QTime.currentTime()
                now = now.toString('hh:mm:ss')
                query = "[" + now + "] 파일 삭제완료"
                self.listWidget.insertItem(0,query)
                
            else:
                self.ser.write("no".encode())
                time.sleep(0.1)
                now = QTime.currentTime()
                now = now.toString('hh:mm:ss')
                query = "[" + now + "] 파일 삭제실패"
                self.listWidget.insertItem(0,query)

            
            #time.sleep(3)
            #self.ser.write(txtname.encode())
            #self.filename = QFileDialog.getSaveFileName(MainWindow, 'Save file', './'+txtname)
        except AttributeError:
            pass
            #self.filename = QFileDialog.getSaveFileName(MainWindow, 'Save file', './')
    
    def SimMotor(self):
        try:
            self.ser.write("sim_control".encode())
            time.sleep(0.1)
            self.cw_control_value = self.CWLineEdit.text()
            #self.ccw_control_value = self.CCWLineEdit.text()
            data = self.cw_control_value#+" "+self.ccw_control_value            
            self.ser.write(data.encode())
            
            now = QTime.currentTime()
            now = now.toString('hh:mm:ss')
            query = "[" + now + "] PWM_CW: " + self.cw_control_value + "%"#"  PWM_CCW: "+self.ccw_control_value + "%"
            self.listWidget.insertItem(0,query)

            
            
        except FileNotFoundError  and serial.SerialException:
            now = QTime.currentTime()
            now = now.toString('hh:mm:ss')
            query = "[" + now + "] 시뮬레이션 동작 실패"
            self.listWidget.insertItem(0,query)
        except AttributeError:
            now = QTime.currentTime()
            now = now.toString('hh:mm:ss')
            query = "[" + now + "] 시뮬레이션 동작 실패"
            self.listWidget.insertItem(0,query)
    
    """
    def CCW_Motor_Control(self):
        try:
            self.ser.write("CCW_control".encode())
            time.sleep(0.1)
            self.ccw_control_value = self.CCWLineEdit.text()
            self.ser.write(self.ccw_control_value.encode())
            
            
        except FileNotFoundError  and serial.SerialException:
            now = QTime.currentTime()
            now = now.toString('hh:mm:ss')
            query = "[" + now + "] 모터 동작 실패"
            self.listWidget.insertItem(0,query)
        except AttributeError:
            now = QTime.currentTime()
            now = now.toString('hh:mm:ss')
            query = "[" + now + "] 모터 동작 실패"
            self.listWidget.insertItem(0,query)
    
    def CCW_Motor_Stop(self):
        try:
            self.ser.write("CCW_Stop".encode())
            time.sleep(0.1)
            #self.cw_control_value = self.CWLineEdit.text()
            #self.ser.write(self.cw_control_value.encode())
            
            
            
        except FileNotFoundError  and serial.SerialException:
            now = QTime.currentTime()
            now = now.toString('hh:mm:ss')
            query = "[" + now + "] 모터 멈춤 실패"
            self.listWidget.insertItem(0,query)
        except AttributeError:
            now = QTime.currentTime()
            now = now.toString('hh:mm:ss')
            query = "[" + now + "] 모터 멈춤 실패"
            self.listWidget.insertItem(0,query)
    """
    
    
    def CW_Motor_Control(self):
        try:
            self.ser.write("CW_control".encode())
            time.sleep(0.1)
            self.cw_control_value = self.CWLineEdit.text()
            self.ser.write(self.cw_control_value.encode())
            
            
        except FileNotFoundError  and serial.SerialException:
            now = QTime.currentTime()
            now = now.toString('hh:mm:ss')
            query = "[" + now + "] 모터 동작 실패"
            self.listWidget.insertItem(0,query)
        except AttributeError:
            now = QTime.currentTime()
            now = now.toString('hh:mm:ss')
            query = "[" + now + "] 모터 동작 실패"
            self.listWidget.insertItem(0,query)
    
    def CW_Motor_Stop(self):
        try:
            self.ser.write("CW_Stop".encode())
            time.sleep(0.1)
            #self.cw_control_value = self.CWLineEdit.text()
            #self.ser.write(self.cw_control_value.encode())
            
            
            
        except FileNotFoundError  and serial.SerialException:
            now = QTime.currentTime()
            now = now.toString('hh:mm:ss')
            query = "[" + now + "] 모터 멈춤 실패"
            self.listWidget.insertItem(0,query)
        except AttributeError:
            now = QTime.currentTime()
            now = now.toString('hh:mm:ss')
            query = "[" + now + "] 모터 멈춤 실패"
            self.listWidget.insertItem(0,query)
    
    def GyroCheck(self):
        try:
            self.ser.write("GyroCheck".encode())      
            p = self.ser.readline().decode('utf-8')
            p_2 = p.split()
            now=QTime.currentTime()
            now=now.toString('hh:mm:ss')
            query = "["+now+"] x: "+ p_2[0] + " y: "+ p_2[1] + " z: " + p_2[2]
            self.listWidget.insertItem(0,query)
                        
        except AttributeError:
            now = QTime.currentTime()
            now = now.toString('hh:mm:ss')
            query = "[" + now + "] Failed to check Gyro\n please check the value"
            self.listWidget.insertItem(0,query)
        except FileNotFoundError and serial.SerialException:
            now = QTime.currentTime()
            now = now.toString('hh:mm:ss')
            query = "[" + now + "] Failed to check Gyro\n please check the value"
            self.listWidget.insertItem(0,query)
    
    def file_download(self):
        
        try:
            if(self.th_number == 1):
                self.widget_listname = self.listWidget.currentItem().text()
                if "timedata" in self.widget_listname:
                    self.ser.write("data_transfer".encode())
                    time.sleep(0.1)
                    self.ser.write(self.widget_listname.encode())
                    t_number=1
                    t_number_2 = 0
                    while t_number:
                        time.sleep(0.5)
                        
                        f = open(self.filename + "/" + self.widget_listname + ".txt",'w')
                        f.close()
                        while True:
                            self.logging_string = str(self.ser.readline().decode('utf-8'))
                            f = open(self.filename + "/" + self.widget_listname + ".txt",'a')
                            if not (self.logging_string=="END"):
                                if (self.th_number == 1):
                                    f.write((str(self.logging_string)).strip())
                                    
                                    f.write("\n")
                                    if t_number_2 == 0:
                                        query = self.filename + "/" + self.widget_listname + ".txt"
                                        self.listWidget.insertItem(0,query)
                                        now = QTime.currentTime()
                                        now = now.toString('hh:mm:ss')
                                        query = "[" + now + "]"+" 로깅 파일 저장시작"
                                        self.listWidget.insertItem(0,query)
                                        t_number_2 = 1
                            else:
                                f.close()
                                query = self.filename + "/" + self.widget_listname + ".txt"
                                self.listWidget.insertItem(0,query)
                                now = QTime.currentTime()
                                now = now.toString('hh:mm:ss')
                                query = "[" + now + "] 로깅 파일 저장완료"
                                self.listWidget.insertItem(0,query)
                                t_number = 0
                                self.k_list.clear()
                                self.th_number = 0
                                   

                                break






                            
                else:
                    now = QTime.currentTime()
                    now = now.toString('hh:mm:ss')
                    query = "[" + now + "] 다시확인해주세요"
                    self.listWidget.insertItem(0,query)
                    
    
        except AttributeError as e:
            now = QTime.currentTime()
            now = now.toString('hh:mm:ss')
            query = "[" + now + "] 다시확인해주세요"
            self.listWidget.insertItem(0,query)

    def th(self):
        self.th_number = 1
        if self.th_number == 1:
            th = threading.Thread(target = self.file_download)
            th.deamon = True
            th.start()
    
    def file_open(self):
        
        self.filename = QFileDialog.getExistingDirectory(MainWindow, 'Select Directory')
        if(self.filename == ""):
            now = QTime.currentTime()
            now = now.toString('hh:mm:ss')
            query = "[" + now + "] 경로를 다시확인해주세요"
            self.listWidget.insertItem(0,query)

        else:
            query = self.filename
            self.listWidget.insertItem(0,query)
            now = QTime.currentTime()
            now = now.toString('hh:mm:ss')
            query = "[" + now + "] 파일 저장경로 설정완료"
            self.listWidget.insertItem(0,query)
    
    def data_name(self):
        try:
            self.ser.write("data_name".encode())
            time.sleep(0.1)

            
            p = self.ser.readline().decode('utf-8')
            #print(p)
            p_2 = p.split()
            p_2.reverse()

            for i in range(len(p_2)):
                #print(str(p_2[i]))
                query = str(p_2[i])
                self.listWidget.insertItem(0,query)

            now = QTime.currentTime()
            now = now.toString('hh:mm:ss')
            query = "[" + now + "] 로깅파일 이름 출력완료"
            self.listWidget.insertItem(0,query)






        except FileNotFoundError  and serial.SerialException:
            now = QTime.currentTime()
            now = now.toString('hh:mm:ss')
            query = "[" + now + "] 로깅파일 이름 출력실패"
            self.listWidget.insertItem(0,query)
        except AttributeError:
            now = QTime.currentTime()
            now = now.toString('hh:mm:ss')
            query = "[" + now + "] 로깅파일 이름 출력실패"
            self.listWidget.insertItem(0,query)
    
    
    def time_check(self):
        try:
            self.ser.write("time_check".encode())
            time.sleep(0.1)
            
            p = self.ser.readline().decode('utf-8')
            p_2 = p.split()

            now = QTime.currentTime()
            now = now.toString('hh:mm:ss')
            pico_time = str(p_2[0]) + "-" + str(p_2[1]) + "-" + str(p_2[2]) + " " + str(p_2[4]) + ":" + str(p_2[5]) + ":" + str(p_2[6]) 
            query = "[" + now + "] PICO 시간 확인\n" + pico_time
            self.listWidget.insertItem(0,query)


        except FileNotFoundError  and serial.SerialException:
            now = QTime.currentTime()
            now = now.toString('hh:mm:ss')
            query = "[" + now + "] 시간 확인 실패"
            self.listWidget.insertItem(0,query)
        except AttributeError:
            now = QTime.currentTime()
            now = now.toString('hh:mm:ss')
            query = "[" + now + "] 시간 확인 실패"
            self.listWidget.insertItem(0,query)

    def time_save(self):
        try:
            self.ser.write("time_save".encode())
            time.sleep(0.1)

            now_date = QDate.currentDate()

            now_year = now_date.toString('yy')
            now_month = now_date.toString('MM')
            now_day = now_date.toString('dd')
            now_weekday = now_date.dayOfWeek()
            now_weekday = format(now_weekday, '02')


            now_time = QTime.currentTime()

            now_hour = now_time.toString('hh')
            now_minute = now_time.toString('mm')            
            now_second = now_time.toString('ss')
            

            transfer_time_data = str(now_year) + " " + str(now_month) + " " + str(now_day) + " " + str(now_weekday) + " " + str(now_hour) + " " + str(now_minute) + " " + str(now_second)
            self.ser.write(transfer_time_data.encode())

            now = QTime.currentTime()
            now = now.toString('hh:mm:ss')
            query = "[" + now + "] 현재 시간으로 설정 완료"
            self.listWidget.insertItem(0,query)




        except FileNotFoundError  and serial.SerialException:
            now = QTime.currentTime()
            now = now.toString('hh:mm:ss')
            query = "[" + now + "] 시간 설정 실패"
            self.listWidget.insertItem(0,query)
        except AttributeError:
            now = QTime.currentTime()
            now = now.toString('hh:mm:ss')
            query = "[" + now + "] 시간 설정 실패"
            self.listWidget.insertItem(0,query)
            
    # Serial Port 연결 창
    def serialport_window(self):
        self.window_serial = QtWidgets.QMainWindow()
        self.ui_serial = Ui_SerialWindow()
        self.ui_serial.setupUi(self.window_serial)
        self.window_serial.show() 
    def transfer_start(self): # 시리얼통신 연결 확인
        try:
            if(self.ser_checking_num == 1):
                self.ser.close()
            
            
            self.ser = serial.Serial(
                port = self.ui_serial.COM_value,
                baudrate = int(self.ui_serial.Baud_value),
                stopbits=serial.STOPBITS_ONE, 
                bytesize=serial.EIGHTBITS,       
                timeout=1                  
                )
                     
            self.ser.write("start".encode())
            self.ser_checking_num = 1
            self.check_variable = "Check"
            time.sleep(0.2)
            
            self.k_list = []
            self.k = self.ser.readline().decode('utf-8')
            self.k_list.append(self.k)
            self.ser.write("".encode())
            
            for x in self.k_list:
                if "CONNECT_SUCCESS" in x:
                    now = QTime.currentTime()
                    now = now.toString('hh:mm:ss')
                    query = "[" + now + "] PICO 연결 성공"
                    self.ser.write("pwm".encode())
                    time.sleep(0.1)
                    pwm = self.ser.readline().decode('utf-8')
                    print(pwm)
                    self.CWLineEdit.setText(pwm)
                    self.listWidget.insertItem(0,query)
                    
                    
                else :
                    now = QTime.currentTime()
                    now = now.toString('hh:mm:ss')
                    query = "[" + now + "] PICO 연결 실패"
                    self.listWidget.insertItem(0,query)
                    self.ser.close()
                    
        except FileNotFoundError  and serial.SerialException:
            now = QTime.currentTime()
            now = now.toString('hh:mm:ss')
            query = "[" + now + "] PICO 연결 실패"
            self.listWidget.insertItem(0,query)
        except AttributeError:
            now = QTime.currentTime()
            now = now.toString('hh:mm:ss')
            query = "[" + now + "] PICO 연결 실패"
            self.listWidget.insertItem(0,query)

    
    def time_out(self):
        currentTime = QDateTime.currentDateTime()
        timeDisplay = currentTime.toString('         yyyy-MM-dd hh:mm:ss')
        self.label_20.setText(timeDisplay)



    def time_out_2(self):

        try:
            datetime = QDateTime.currentDateTime()

            self.start_time_1 = datetime.addSecs(int(self.delaytime_value_sec))
            timeDisplay = self.start_time_1.toString('yyyy-MM-dd hh:mm:ss')
            self.label.setText(timeDisplay)
            #------------------------------------------------------------

            self.start_time_2 = datetime.addSecs(int(self.delaytime_value_sec)+int(self.cycle_sec_value))
            timeDisplay = self.start_time_2.toString('yyyy-MM-dd hh:mm:ss')
            self.label_3.setText(timeDisplay)
            #------------------------------------------------------------

            self.start_time_3 = datetime.addSecs(int(self.delaytime_value_sec)+int(self.cycle_sec_value)*2)
            timeDisplay = self.start_time_3.toString('yyyy-MM-dd hh:mm:ss')
            self.label_4.setText(timeDisplay)
            #------------------------------------------------------------

            self.start_time_4 = datetime.addSecs(int(self.delaytime_value_sec)+int(self.cycle_sec_value)*3)
            timeDisplay = self.start_time_4.toString('yyyy-MM-dd hh:mm:ss')
            self.label_5.setText(timeDisplay)
            #------------------------------------------------------------

            self.start_time_5 = datetime.addSecs(int(self.delaytime_value_sec)+int(self.cycle_sec_value)*4)
            timeDisplay = self.start_time_5.toString('yyyy-MM-dd hh:mm:ss')
            self.label_6.setText(timeDisplay)
            #------------------------------------------------------------

            self.start_time_6 = datetime.addSecs(int(self.delaytime_value_sec)+int(self.cycle_sec_value)*5)
            timeDisplay = self.start_time_6.toString('yyyy-MM-dd hh:mm:ss')
            self.label_7.setText(timeDisplay)
            #------------------------------------------------------------

            self.start_time_7 = datetime.addSecs(int(self.delaytime_value_sec)+int(self.cycle_sec_value)*6)
            timeDisplay = self.start_time_7.toString('yyyy-MM-dd hh:mm:ss')
            self.label_14.setText(timeDisplay)
            #------------------------------------------------------------

            self.start_time_8 = datetime.addSecs(int(self.delaytime_value_sec)+int(self.cycle_sec_value)*7)
            timeDisplay = self.start_time_8.toString('yyyy-MM-dd hh:mm:ss')
            self.label_16.setText(timeDisplay)
            #------------------------------------------------------------

            self.start_time_9 = datetime.addSecs(int(self.delaytime_value_sec)+int(self.cycle_sec_value)*8)
            timeDisplay = self.start_time_9.toString('yyyy-MM-dd hh:mm:ss')
            self.label_19.setText(timeDisplay)
            #------------------------------------------------------------

            self.start_time_10 = datetime.addSecs(int(self.delaytime_value_sec)+int(self.cycle_sec_value)*9)
            timeDisplay = self.start_time_10.toString('yyyy-MM-dd hh:mm:ss')
            self.label_23.setText(timeDisplay)
            #------------------------------------------------------------

            self.start_time_11 = datetime.addSecs(int(self.delaytime_value_sec)+int(self.cycle_sec_value)*10)
            timeDisplay = self.start_time_11.toString('yyyy-MM-dd hh:mm:ss')
            self.label_24.setText(timeDisplay)
            #------------------------------------------------------------

            self.start_time_12 = datetime.addSecs(int(self.delaytime_value_sec)+int(self.cycle_sec_value)*11)
            timeDisplay = self.start_time_12.toString('yyyy-MM-dd hh:mm:ss')
            self.label_28.setText(timeDisplay)
            #------------------------------------------------------------

            self.end_time = datetime.addSecs(int(self.delaytime_value_sec)+int(self.cycle_sec_value)*12)
            timeDisplay = self.end_time.toString('yyyy-MM-dd hh:mm:ss')
            self.label_29.setText(timeDisplay)
            #------------------------------------------------------------

        except AttributeError:
            currentTime = QDateTime.currentDateTime()
            timeDisplay = currentTime.toString('yyyy-MM-dd hh:mm:ss')
            self.label.setText(timeDisplay)
            self.label_3.setText(timeDisplay)
            self.label_4.setText(timeDisplay)
            self.label_5.setText(timeDisplay)
            self.label_6.setText(timeDisplay)
            self.label_7.setText(timeDisplay)
            self.label_14.setText(timeDisplay)
            self.label_16.setText(timeDisplay)
            self.label_19.setText(timeDisplay)
            self.label_23.setText(timeDisplay)
            self.label_24.setText(timeDisplay)
            self.label_28.setText(timeDisplay)
            self.label_29.setText(timeDisplay)
            
    def CWConfig(self):
        self.CWpwm_value = 0
        self.CWpwm_value = int(self.lineEdit_4.text())
        
        now = QTime.currentTime()
        now = now.toString('hh:mm:ss')
        query = "[" + now + "] Clock Wise PWM : "+str(self.lineEdit_4.text())+" 저장 완료"
        self.listWidget.insertItem(0,query)
    
    """
    def CCWConfig(self):
        self.CCWpwm_value = 0
        self.CCWpwm_value = int(self.lineEdit_5.text())
        
        now = QTime.currentTime()
        now = now.toString('hh:mm:ss')
        query = "[" + now + "] Counter Clock Wise PWM : "+str(self.lineEdit_5.text())+" 저장 완료"
        self.listWidget.insertItem(0,query)
    """

    def delay_time(self):
        self.delaytime_value_sec = 0
        self.delaytime_value_sec = int(self.lineEdit_3.text())*60

        now = QTime.currentTime()
        now = now.toString('hh:mm:ss')
        query = "[" + now + "] DELAY MINUTE : "+str(self.lineEdit_3.text())+" MINUTE 저장 완료"
        self.listWidget.insertItem(0,query)

    def time_term(self):

        try:
            self.cycle_sec_value = 0
##            if self.comboBox_2.currentText() == "TIME TERM":
##                now = QTime.currentTime()
##                now = now.toString('hh:mm:ss')
##                query = "[" + now + "] 설정값을 다시 확인해주세요"
##                self.listWidget.addItem(query)
##            if self.lineEdit_2.text() == "":
##                now = QTime.currentTime()
##                now = now.toString('hh:mm:ss')
##                query = "[" + now + "] 설정값을 다시 확인해주세요"
##                self.listWidget.addItem(query)
                
            if self.comboBox_2.currentText() == "DAY":
                self.cycle_sec_value = int(self.lineEdit_2.text())*24*60*60
            if self.comboBox_2.currentText() == "HOUR":
                self.cycle_sec_value = int(self.lineEdit_2.text())*60*60
            if self.comboBox_2.currentText() == "MINUTE":
                self.cycle_sec_value = int(self.lineEdit_2.text())*60

            self.cycle_sec_value_2 = self.lineEdit_2.text()
            self.time_term_value = self.comboBox_2.currentText()

            self.sec_value = int(self.delaytime_value_sec + self.cycle_sec_value)
            datetime = QDateTime.currentDateTime()

            self.start_time_1 = datetime.addSecs(int(self.delaytime_value_sec))
            timeDisplay = self.start_time_1.toString('yyyy-MM-dd hh:mm:ss')
            self.label.setText(timeDisplay)
            #------------------------------------------------------------

            self.start_time_2 = datetime.addSecs(int(self.delaytime_value_sec)+int(self.cycle_sec_value))
            timeDisplay = self.start_time_2.toString('yyyy-MM-dd hh:mm:ss')
            self.label_3.setText(timeDisplay)
            #------------------------------------------------------------

            self.start_time_3 = datetime.addSecs(int(self.delaytime_value_sec)+int(self.cycle_sec_value)*2)
            timeDisplay = self.start_time_3.toString('yyyy-MM-dd hh:mm:ss')
            self.label_4.setText(timeDisplay)
            #------------------------------------------------------------

            self.start_time_4 = datetime.addSecs(int(self.delaytime_value_sec)+int(self.cycle_sec_value)*3)
            timeDisplay = self.start_time_4.toString('yyyy-MM-dd hh:mm:ss')
            self.label_5.setText(timeDisplay)
            #------------------------------------------------------------

            self.start_time_5 = datetime.addSecs(int(self.delaytime_value_sec)+int(self.cycle_sec_value)*4)
            timeDisplay = self.start_time_5.toString('yyyy-MM-dd hh:mm:ss')
            self.label_6.setText(timeDisplay)
            #------------------------------------------------------------

            self.start_time_6 = datetime.addSecs(int(self.delaytime_value_sec)+int(self.cycle_sec_value)*5)
            timeDisplay = self.start_time_6.toString('yyyy-MM-dd hh:mm:ss')
            self.label_7.setText(timeDisplay)
            #------------------------------------------------------------

            self.start_time_7 = datetime.addSecs(int(self.delaytime_value_sec)+int(self.cycle_sec_value)*6)
            timeDisplay = self.start_time_7.toString('yyyy-MM-dd hh:mm:ss')
            self.label_14.setText(timeDisplay)
            #------------------------------------------------------------

            self.start_time_8 = datetime.addSecs(int(self.delaytime_value_sec)+int(self.cycle_sec_value)*7)
            timeDisplay = self.start_time_8.toString('yyyy-MM-dd hh:mm:ss')
            self.label_16.setText(timeDisplay)
            #------------------------------------------------------------

            self.start_time_9 = datetime.addSecs(int(self.delaytime_value_sec)+int(self.cycle_sec_value)*8)
            timeDisplay = self.start_time_9.toString('yyyy-MM-dd hh:mm:ss')
            self.label_19.setText(timeDisplay)
            #------------------------------------------------------------

            self.start_time_10 = datetime.addSecs(int(self.delaytime_value_sec)+int(self.cycle_sec_value)*9)
            timeDisplay = self.start_time_10.toString('yyyy-MM-dd hh:mm:ss')
            self.label_23.setText(timeDisplay)
            #------------------------------------------------------------

            self.start_time_11 = datetime.addSecs(int(self.delaytime_value_sec)+int(self.cycle_sec_value)*10)
            timeDisplay = self.start_time_11.toString('yyyy-MM-dd hh:mm:ss')
            self.label_24.setText(timeDisplay)
            #------------------------------------------------------------

            self.start_time_12 = datetime.addSecs(int(self.delaytime_value_sec)+int(self.cycle_sec_value)*11)
            timeDisplay = self.start_time_12.toString('yyyy-MM-dd hh:mm:ss')
            self.label_28.setText(timeDisplay)
            #------------------------------------------------------------

            self.end_time = datetime.addSecs(int(self.delaytime_value_sec)+int(self.cycle_sec_value)*12)
            timeDisplay = self.end_time.toString('yyyy-MM-dd hh:mm:ss')
            self.label_29.setText(timeDisplay)
            #------------------------------------------------------------

            now = QTime.currentTime()
            now = now.toString('hh:mm:ss')
            query = "[" + now + "] CYCLE TERM : "+str(self.cycle_sec_value_2)+" "+str(self.time_term_value) + " 저장 완료"
            self.listWidget.insertItem(0,query)
        except ValueError:
            now = QTime.currentTime()
            now = now.toString('hh:mm:ss')
            query = "[" + now + "]"
            self.listWidget.addItem(query)
            query = "설정값을 다시 확인해주세요"
            self.listWidget.insertItem(query)
            


    def check_value(self):

        try:
            now = QTime.currentTime()
            now = now.toString('hh:mm:ss')
            query = "[" + now + "] 설정값 확인"
            self.listWidget.insertItem(0,query)

            query = "DELAY MINUTE : " + str(int(int(self.delaytime_value_sec)/60)) + " MINUTE"
            self.listWidget.insertItem(1,query)
            query = "CYCLE TERM : "+  str(self.cycle_sec_value_2)+" "+str(self.time_term_value)
            self.listWidget.insertItem(2,query)
            
            query = "CW PWM: " + str(self.CWpwm_value) + " PWM(%)"
            self.listWidget.insertItem(3,query)
            #query = "CCW PWM: " + str(self.CCWpwm_value) + " PWM(%)"
            #self.listWidget.addItem(query)
            
            query = "예상 시작시간"
            self.listWidget.insertItem(4,query)
            query = "CYCLE 1 : "+self.label.text()
            self.listWidget.insertItem(5,query)
            query = "CYCLE 2 : "+self.label_3.text()
            self.listWidget.insertItem(6,query)
            query = "CYCLE 3 : "+self.label_4.text()
            self.listWidget.insertItem(7,query)
            query = "CYCLE 4 : "+self.label_5.text()
            self.listWidget.insertItem(8,query)
            query = "CYCLE 5 : "+self.label_6.text()
            self.listWidget.insertItem(9,query)
            query = "CYCLE 6 : "+self.label_7.text()
            self.listWidget.insertItem(10,query)
            query = "CYCLE 7 : "+self.label_14.text()
            self.listWidget.insertItem(11,query)
            query = "CYCLE 8 : "+self.label_16.text()
            self.listWidget.insertItem(12,query)
            query = "CYCLE 9 : "+self.label_19.text()
            self.listWidget.insertItem(13,query)
            query = "CYCLE 10 : "+self.label_23.text()
            self.listWidget.insertItem(14,query)
            query = "CYCLE 11 : "+self.label_24.text()
            self.listWidget.insertItem(15,query)
            query = "CYCLE 12 : "+self.label_28.text()
            self.listWidget.insertItem(16,query)
            query = "CYCLE END : "+self.label_29.text()
            self.listWidget.insertItem(17,query)
            
            

        except AttributeError :
            query = "설정 값을 다시확인해주세요"
            self.listWidget.addItem(query)

    def transfer_value(self):

        try:
            self.ser.write("config_save".encode())
            time.sleep(0.1)
            
            
            #filename = "config.cfg"
            #f = open(filename,"w")
            if self.time_term_value == "DAY":
                #print("Day config detect")
                transfer_text = "startdelaytimeminute "+str(int(int(self.delaytime_value_sec)/60))+" off timecycleminute 0 off timecyclehour 0 on timecycleday "+ str(self.cycle_sec_value_2) + " CW " + str(self.CWpwm_value)
                #f.write(transfer_text)
                #f.close()
                self.ser.write(transfer_text.encode())

                now = QTime.currentTime()
                now = now.toString('hh:mm:ss')
                query = "[" + now + "] CONFIG.CFG 저장완료"
                self.listWidget.insertItem(0,query)
                
            if self.time_term_value == "HOUR":
                #print("Hour config detect")
                transfer_text = "startdelaytimeminute "+str(int(int(self.delaytime_value_sec)/60))+" off timecycleminute 0 on timecyclehour "+ str(self.cycle_sec_value_2)+" off timecycleday 0"  + " CW " + str(self.CWpwm_value)
                #f.write(transfer_text)
                #f.close()
                self.ser.write(transfer_text.encode())

                now = QTime.currentTime()
                now = now.toString('hh:mm:ss')
                query = "[" + now + "] CONFIG.CFG 저장완료"
                self.listWidget.insertItem(0,query)
                
            if self.time_term_value == "MINUTE":
                #print("Minute config detect")
                transfer_text = "startdelaytimeminute "+str(int(int(self.delaytime_value_sec)/60))+" on timecycleminute "+ str(self.cycle_sec_value_2) + " off timecyclehour 0  off timecycleday 0" + " CW " + str(self.CWpwm_value)
                #f.write(transfer_text)
                #f.close()
                self.ser.write(transfer_text.encode())

                now = QTime.currentTime()
                now = now.toString('hh:mm:ss')
                query = "[" + now + "] CONFIG.CFG 저장완료"
                self.listWidget.insertItem(0,query)

            

        except AttributeError:
            now = QTime.currentTime()
            now = now.toString('hh:mm:ss')
            query = "[" + now + "]"
            self.listWidget.addItem(query)
            query = "설정값을 다시 확인해주세요"
            self.listWidget.insertItem(0,query)


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
