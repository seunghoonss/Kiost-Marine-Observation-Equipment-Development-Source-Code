# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'LEDchamber.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *
from PyQt5.QtCore import QDate,QTime,QDateTime,QTimer
import time
from PyQt5.QtGui import QPixmap
import os
import pandas as pd
import serial
from window2 import Ui_SerialWindow
import time
import threading
from os import environ
from serial import SerialException


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(611, 865)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label_20 = QtWidgets.QLabel(self.centralwidget)
        self.label_20.setGeometry(QtCore.QRect(-25, 40, 331, 51))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.label_20.setFont(font)
        self.label_20.setObjectName("label_20")
        self.listWidget = QtWidgets.QListWidget(self.centralwidget)
        self.listWidget.setGeometry(QtCore.QRect(30, 380, 271, 449))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.listWidget.setFont(font)
        self.listWidget.setObjectName("listWidget")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(40, 125, 121, 51))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setObjectName("pushButton_2")
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setGeometry(QtCore.QRect(20, 90, 571, 41))
        self.line.setFrameShadow(QtWidgets.QFrame.Plain)
        self.line.setLineWidth(4)
        self.line.setMidLineWidth(4)
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setObjectName("line")
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(480, 610, 91, 41))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_4.setFont(font)
        self.pushButton_4.setObjectName("pushButton_4")
        self.label_22 = QtWidgets.QLabel(self.centralwidget)
        self.label_22.setGeometry(QtCore.QRect(40, 190, 131, 31))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(13)
        font.setBold(True)
        font.setWeight(75)
        self.label_22.setFont(font)
        self.label_22.setObjectName("label_22")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_2.setGeometry(QtCore.QRect(195, 280, 101, 31))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.lineEdit_2.setFont(font)
        self.lineEdit_2.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.label_34 = QtWidgets.QLabel(self.centralwidget)
        self.label_34.setGeometry(QtCore.QRect(330, 610, 141, 41))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_34.setFont(font)
        self.label_34.setObjectName("label_34")
        self.lineEdit_3 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_3.setGeometry(QtCore.QRect(195, 190, 101, 31))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.lineEdit_3.setFont(font)
        self.lineEdit_3.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.label_32 = QtWidgets.QLabel(self.centralwidget)
        self.label_32.setGeometry(QtCore.QRect(40, 277, 111, 31))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(13)
        font.setBold(True)
        font.setWeight(75)
        self.label_32.setFont(font)
        self.label_32.setObjectName("label_32")
        self.lineEdit_5 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_5.setGeometry(QtCore.QRect(195, 235, 101, 31))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.lineEdit_5.setFont(font)
        self.lineEdit_5.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_5.setObjectName("lineEdit_5")
        self.lineEdit_4 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_4.setGeometry(QtCore.QRect(195, 325, 101, 31))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.lineEdit_4.setFont(font)
        self.lineEdit_4.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_4.setObjectName("lineEdit_4")
        self.label_31 = QtWidgets.QLabel(self.centralwidget)
        self.label_31.setGeometry(QtCore.QRect(40, 233, 151, 31))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(13)
        font.setBold(True)
        font.setWeight(75)
        self.label_31.setFont(font)
        self.label_31.setObjectName("label_31")
        self.label_33 = QtWidgets.QLabel(self.centralwidget)
        self.label_33.setGeometry(QtCore.QRect(40, 325, 111, 31))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(13)
        font.setBold(True)
        font.setWeight(75)
        self.label_33.setFont(font)
        self.label_33.setObjectName("label_33")
        self.line_2 = QtWidgets.QFrame(self.centralwidget)
        self.line_2.setGeometry(QtCore.QRect(20, 820, 571, 41))
        self.line_2.setFrameShadow(QtWidgets.QFrame.Plain)
        self.line_2.setLineWidth(4)
        self.line_2.setMidLineWidth(4)
        self.line_2.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_2.setObjectName("line_2")
        self.line_3 = QtWidgets.QFrame(self.centralwidget)
        self.line_3.setGeometry(QtCore.QRect(20, 0, 571, 41))
        self.line_3.setFrameShadow(QtWidgets.QFrame.Plain)
        self.line_3.setLineWidth(4)
        self.line_3.setMidLineWidth(4)
        self.line_3.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_3.setObjectName("line_3")
        self.line_4 = QtWidgets.QFrame(self.centralwidget)
        self.line_4.setGeometry(QtCore.QRect(12, 20, 20, 820))
        self.line_4.setFrameShadow(QtWidgets.QFrame.Plain)
        self.line_4.setLineWidth(4)
        self.line_4.setMidLineWidth(4)
        self.line_4.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_4.setObjectName("line_4")
        self.line_5 = QtWidgets.QFrame(self.centralwidget)
        self.line_5.setGeometry(QtCore.QRect(579, 20, 20, 820))
        self.line_5.setFrameShadow(QtWidgets.QFrame.Plain)
        self.line_5.setLineWidth(4)
        self.line_5.setMidLineWidth(4)
        self.line_5.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_5.setObjectName("line_5")
        self.line_6 = QtWidgets.QFrame(self.centralwidget)
        self.line_6.setGeometry(QtCore.QRect(300, 110, 20, 730))
        self.line_6.setFrameShadow(QtWidgets.QFrame.Plain)
        self.line_6.setLineWidth(4)
        self.line_6.setMidLineWidth(4)
        self.line_6.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_6.setObjectName("line_6")
        self.line_8 = QtWidgets.QFrame(self.centralwidget)
        self.line_8.setGeometry(QtCore.QRect(20, 350, 291, 41))
        self.line_8.setFrameShadow(QtWidgets.QFrame.Plain)
        self.line_8.setLineWidth(4)
        self.line_8.setMidLineWidth(4)
        self.line_8.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_8.setObjectName("line_8")
        self.pushButton_5 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_5.setGeometry(QtCore.QRect(180, 125, 121, 51))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_5.setFont(font)
        self.pushButton_5.setObjectName("pushButton_5")
        self.label_35 = QtWidgets.QLabel(self.centralwidget)
        self.label_35.setGeometry(QtCore.QRect(330, 670, 141, 41))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_35.setFont(font)
        self.label_35.setObjectName("label_35")
        self.pushButton_6 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_6.setGeometry(QtCore.QRect(480, 670, 91, 41))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_6.setFont(font)
        self.pushButton_6.setObjectName("pushButton_6")
        self.label_36 = QtWidgets.QLabel(self.centralwidget)
        self.label_36.setGeometry(QtCore.QRect(330, 730, 141, 41))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_36.setFont(font)
        self.label_36.setObjectName("label_36")
        self.pushButton_7 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_7.setGeometry(QtCore.QRect(480, 730, 91, 41))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_7.setFont(font)
        self.pushButton_7.setObjectName("pushButton_7")
        self.line_10 = QtWidgets.QFrame(self.centralwidget)
        self.line_10.setGeometry(QtCore.QRect(310, 570, 281, 41))
        self.line_10.setFrameShadow(QtWidgets.QFrame.Plain)
        self.line_10.setLineWidth(4)
        self.line_10.setMidLineWidth(4)
        self.line_10.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_10.setObjectName("line_10")
        
        self.line_15 = QtWidgets.QFrame(self.centralwidget)
        self.line_15.setGeometry(QtCore.QRect(310, 770, 281, 41))
        self.line_15.setFrameShadow(QtWidgets.QFrame.Plain)
        self.line_15.setLineWidth(4)
        self.line_15.setMidLineWidth(4)
        self.line_15.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_15.setObjectName("line_15")
        self.label_37 = QtWidgets.QLabel(self.centralwidget)
        self.label_37.setGeometry(QtCore.QRect(330, 120, 241, 31))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(13)
        font.setBold(True)
        font.setWeight(75)
        self.label_37.setFont(font)
        self.label_37.setObjectName("label_37")
        self.pushButton_8 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_8.setGeometry(QtCore.QRect(480, 160, 91, 31))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_8.setFont(font)
        self.pushButton_8.setObjectName("pushButton_8")
        
        self.pushButton_16 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_16.setGeometry(QtCore.QRect(480, 800, 91, 31))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_16.setFont(font)
        self.pushButton_16.setObjectName("pushButton_16")
        
        self.lineEdit_6 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_6.setGeometry(QtCore.QRect(330, 160, 121, 31))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.lineEdit_6.setFont(font)
        self.lineEdit_6.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_6.setObjectName("lineEdit_6")
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(325, 40, 111, 51))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_3.setFont(font)
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_9 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_9.setGeometry(QtCore.QRect(465, 40, 111, 51))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_9.setFont(font)
        self.pushButton_9.setObjectName("pushButton_9")
        self.line_11 = QtWidgets.QFrame(self.centralwidget)
        self.line_11.setGeometry(QtCore.QRect(300, 20, 20, 91))
        self.line_11.setFrameShadow(QtWidgets.QFrame.Plain)
        self.line_11.setLineWidth(4)
        self.line_11.setMidLineWidth(4)
        self.line_11.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_11.setObjectName("line_11")
        self.label_38 = QtWidgets.QLabel(self.centralwidget)
        self.label_38.setGeometry(QtCore.QRect(330, 260, 251, 31))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(13)
        font.setBold(True)
        font.setWeight(75)
        self.label_38.setFont(font)
        self.label_38.setObjectName("label_38")
        
        self.label_41 = QtWidgets.QLabel(self.centralwidget)
        self.label_41.setGeometry(QtCore.QRect(330, 800, 130, 31))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_41.setFont(font)
        self.label_41.setObjectName("label_41")
        
        self.lineEdit_7 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_7.setGeometry(QtCore.QRect(330, 300, 121, 31))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.lineEdit_7.setFont(font)
        self.lineEdit_7.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_7.setObjectName("lineEdit_7")
        self.pushButton_10 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_10.setGeometry(QtCore.QRect(480, 300, 91, 31))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_10.setFont(font)
        self.pushButton_10.setObjectName("pushButton_10")
        self.lineEdit_8 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_8.setGeometry(QtCore.QRect(330, 400, 121, 31))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.lineEdit_8.setFont(font)
        self.lineEdit_8.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_8.setObjectName("lineEdit_8")
        self.label_39 = QtWidgets.QLabel(self.centralwidget)
        self.label_39.setGeometry(QtCore.QRect(330, 360, 251, 31))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(13)
        font.setBold(True)
        font.setWeight(75)
        self.label_39.setFont(font)
        self.label_39.setObjectName("label_39")
        self.pushButton_11 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_11.setGeometry(QtCore.QRect(480, 400, 91, 31))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_11.setFont(font)
        self.pushButton_11.setObjectName("pushButton_11")
        self.pushButton_12 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_12.setGeometry(QtCore.QRect(480, 445, 91, 31))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_12.setFont(font)
        self.pushButton_12.setObjectName("pushButton_12")
        self.line_12 = QtWidgets.QFrame(self.centralwidget)
        self.line_12.setGeometry(QtCore.QRect(310, 470, 281, 41))
        self.line_12.setFrameShadow(QtWidgets.QFrame.Plain)
        self.line_12.setLineWidth(4)
        self.line_12.setMidLineWidth(4)
        self.line_12.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_12.setObjectName("line_12")
        self.line_13 = QtWidgets.QFrame(self.centralwidget)
        self.line_13.setGeometry(QtCore.QRect(310, 330, 281, 41))
        self.line_13.setFrameShadow(QtWidgets.QFrame.Plain)
        self.line_13.setLineWidth(4)
        self.line_13.setMidLineWidth(4)
        self.line_13.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_13.setObjectName("line_13")
        self.line_14 = QtWidgets.QFrame(self.centralwidget)
        self.line_14.setGeometry(QtCore.QRect(310, 230, 281, 41))
        self.line_14.setFrameShadow(QtWidgets.QFrame.Plain)
        self.line_14.setLineWidth(4)
        self.line_14.setMidLineWidth(4)
        self.line_14.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_14.setObjectName("line_14")
        self.pushButton_14 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_14.setGeometry(QtCore.QRect(480, 205, 91, 31))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_14.setFont(font)
        self.pushButton_14.setObjectName("pushButton_14")
        self.label_40 = QtWidgets.QLabel(self.centralwidget)
        self.label_40.setGeometry(QtCore.QRect(330, 500, 251, 31))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(13)
        font.setBold(True)
        font.setWeight(75)
        self.label_40.setFont(font)
        self.label_40.setObjectName("label_40")
        self.pushButton_13 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_13.setGeometry(QtCore.QRect(340, 540, 91, 31))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_13.setFont(font)
        self.pushButton_13.setObjectName("pushButton_13")
        self.pushButton_15 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_15.setGeometry(QtCore.QRect(480, 540, 91, 31))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_15.setFont(font)
        self.pushButton_15.setObjectName("pushButton_15")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        # 디지털 시계
        self.timer = QtCore.QTimer(MainWindow)
        self.timer.timeout.connect(self.time_out)
        self.timer.start(1000)

        # 시리얼통신 확인
        self.timer_2 = QtCore.QTimer(MainWindow)
        self.timer_2.timeout.connect(self.serial_test)
        self.timer_2.start(2000)

        # 시리얼 연결 변수
        self.ser_checking_num = 0


        # 버튼클릭함수
        self.pushButton_3.clicked.connect(self.serialport_window)
        self.pushButton_9.clicked.connect(self.transfer_start)
        self.pushButton_2.clicked.connect(self.config_data_check)
        self.pushButton_5.clicked.connect(self.config_save)
        self.pushButton_4.clicked.connect(self.data_name)
        self.pushButton_6.clicked.connect(self.file_open)
        self.pushButton_7.clicked.connect(self.th)
        self.pushButton_8.clicked.connect(self.led_control)
        self.pushButton_14.clicked.connect(self.led_stop)
        self.pushButton_11.clicked.connect(self.motor_pwm_control)
        self.pushButton_12.clicked.connect(self.motor_stop)
        self.pushButton_10.clicked.connect(self.led_pwm_save)
        self.pushButton_13.clicked.connect(self.time_check)
        self.pushButton_15.clicked.connect(self.time_save)
        self.pushButton_16.clicked.connect(self.Oxcheck)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "LED Chamber"))
        self.label_20.setText(_translate("MainWindow", "         2022-05-26 00:00:00"))
        self.pushButton_2.setText(_translate("MainWindow", "설정값 확인"))
        self.pushButton_4.setText(_translate("MainWindow", "확인"))
        self.label_22.setText(_translate("MainWindow", "대기 시간(MIN)"))
        self.label_34.setText(_translate("MainWindow", "파일 이름 확인"))
        self.label_32.setText(_translate("MainWindow", "측정 횟수"))
        self.label_31.setText(_translate("MainWindow", "LED 밝기 변화 횟수"))
        self.label_33.setText(_translate("MainWindow", "모터 PWM"))
        self.pushButton_5.setText(_translate("MainWindow", "저장"))
        self.label_35.setText(_translate("MainWindow", "파일 경로 설정"))
        self.pushButton_6.setText(_translate("MainWindow", "확인"))
        self.label_36.setText(_translate("MainWindow", "파일 다운로드"))
        self.pushButton_7.setText(_translate("MainWindow", "확인"))
        self.label_37.setText(_translate("MainWindow", "LED 밝기 확인 (0 ~ 100%)"))
        self.pushButton_8.setText(_translate("MainWindow", "확인"))
        self.pushButton_16.setText(_translate("MainWindow", "확인"))
        self.pushButton_3.setText(_translate("MainWindow", "시리얼 통신\n"
" 설정"))
        self.pushButton_9.setText(_translate("MainWindow", "시리얼 통신\n"
"연결"))
        self.label_38.setText(_translate("MainWindow", "LED 최대 밝기 저장 (0 ~ 100%)"))
        self.pushButton_10.setText(_translate("MainWindow", "저장"))
        self.label_39.setText(_translate("MainWindow", "모터 PWM 테스트 (0 ~ 100%)"))
        self.pushButton_11.setText(_translate("MainWindow", "작동"))
        self.pushButton_12.setText(_translate("MainWindow", "멈춤"))
        self.pushButton_14.setText(_translate("MainWindow", "멈춤"))
        self.label_40.setText(_translate("MainWindow", "시간 확인과 현재시간 저장"))
        self.label_41.setText(_translate("MainWindow", "산소 센서 확인"))
        self.pushButton_13.setText(_translate("MainWindow", "확인"))
        self.pushButton_15.setText(_translate("MainWindow", "저장"))
        self.lineEdit_3.setText(_translate("MainWindow", "0"))
        self.lineEdit_2.setText(_translate("MainWindow", "0"))
        self.lineEdit_4.setText(_translate("MainWindow", "0"))
        self.lineEdit_5.setText(_translate("MainWindow", "0"))
        self.lineEdit_6.setText(_translate("MainWindow", "0"))
        self.lineEdit_7.setText(_translate("MainWindow", "0"))
        self.lineEdit_8.setText(_translate("MainWindow", "0"))
        
    def Oxcheck(self):
        try:
            self.ser.write("OxCheck".encode())
            cron=1
            while(cron):
                #print("!")
            
                self.k_list = []
                self.k = self.ser.readline().decode('utf-8')
                self.k_list.append(self.k)
                for x in self.k_list:
                    if "N" in x:
                        #print("@")
                        now=QTime.currentTime()
                        now=now.toString('hh:mm:ss')
                      
                        data_inform_T = int(x.index('T'))
                        data_inform_O = int(x.index('O'))
                        
                        dT=x[data_inform_T+1:data_inform_T+5]
                        dO=x[data_inform_O+1:data_inform_O+7]
                        
                        
                        query = "["+now+"] Temp: "+ str(float(int(dT)/100)) + "  Oxygen: "+ str(float(int(dO)/100))
                        self.listWidget.insertItem(0,query)
                        cron=0
                        
        except AttributeError:
            now = QTime.currentTime()
            now = now.toString('hh:mm:ss')
            query = "[" + now + "] Failed to check Ox\n please check the value"
            self.listWidget.insertItem(0,query)
        except FileNotFoundError and serial.SerialException:
            now = QTime.currentTime()
            now = now.toString('hh:mm:ss')
            query = "[" + now + "] Failed to check Ox\n please check the value"
            self.listWidget.insertItem(0,query)
    

    # 시계 함수
    def time_out(self):
        currentTime = QDateTime.currentDateTime()
        timeDisplay = currentTime.toString('         yyyy-MM-dd hh:mm:ss')
        self.label_20.setText(timeDisplay)

    # Serial Port 연결 창
    def serialport_window(self):
        self.window_serial = QtWidgets.QMainWindow()
        self.ui_serial = Ui_SerialWindow()
        self.ui_serial.setupUi(self.window_serial)
        self.window_serial.show()

    # Serial Port 연결 확인테스트
    def serial_test(self):      
            try:
                if self.ui_serial.check_number == 1:
                    query = "STOP BITS : "+str(self.ui_serial.Stopbits_value)
                    self.listWidget.insertItem(0,query)
                    query = "PARITY : "+str(self.ui_serial.Parity_value)
                    self.listWidget.insertItem(0,query)
                    query = "FLOW CONTROL : "+str(self.ui_serial.Flowcontrol_value)
                    self.listWidget.insertItem(0,query)
                    query = "BITS : "+str(self.ui_serial.Databits_value)
                    self.listWidget.insertItem(0,query)
                    query = "BAUD RATE : "+str(self.ui_serial.Baud_value)
                    self.listWidget.insertItem(0,query)
                    query = "PORT : "+str(self.ui_serial.COM_value)
                    self.listWidget.insertItem(0,query)
                        
                    now = QTime.currentTime()
                    now = now.toString('hh:mm:ss')
                    query = "[" + now + "] Serial 설정 확인"
                    self.listWidget.insertItem(0,query)
                    self.ui_serial.check_number = 0
            except AttributeError:
                pass

    def transfer_start(self): # 시리얼통신 연결 확인
        
  
        try:
            if(self.ser_checking_num == 1):
                self.ser.close()
            
            
            self.ser = serial.Serial(
                port = self.ui_serial.COM_value,
                baudrate = int(self.ui_serial.Baud_value),
                stopbits=serial.STOPBITS_ONE, 
                bytesize=serial.EIGHTBITS,       
                timeout=1                  
                )
                     
            self.ser.write("start".encode())
            self.ser_checking_num = 1
            self.check_variable = "Check"
            time.sleep(0.2)
            
            self.k_list = []
            self.k = self.ser.readline().decode('utf-8')
            self.k_list.append(self.k)
            self.ser.write("".encode())
            
            for x in self.k_list:
                if "CONNECT_SUCCESS" in x:
                    now = QTime.currentTime()
                    now = now.toString('hh:mm:ss')
                    query = "[" + now + "] PICO 연결 성공"
                    self.listWidget.insertItem(0,query)
                else :
                    now = QTime.currentTime()
                    now = now.toString('hh:mm:ss')
                    query = "[" + now + "] PICO 연결 실패"
                    self.listWidget.insertItem(0,query)
                    self.ser.close()
                    
        except FileNotFoundError  and serial.SerialException:
            now = QTime.currentTime()
            now = now.toString('hh:mm:ss')
            query = "[" + now + "] PICO 연결 실패"
            self.listWidget.insertItem(0,query)
        except AttributeError:
            now = QTime.currentTime()
            now = now.toString('hh:mm:ss')
            query = "[" + now + "] PICO 연결 실패"
            self.listWidget.insertItem(0,query)


    def config_data_check(self):

        try:
            self.ser.write("config_check".encode())
            time.sleep(0.1)

            p = self.ser.readline().decode('utf-8')
            p_2 = p.split()
            query = "모터 PWM : "+str(p_2[3])+" %"
            self.listWidget.insertItem(0,query)
            query = "측정횟수 : "+str(p_2[2])+" 번"
            self.listWidget.insertItem(0,query)
            query = "LED 밝기 변화 횟수 : "+str(p_2[1])+" 번"
            self.listWidget.insertItem(0,query)
            query = "대기시간 : "+str(p_2[0])+" MINUTE"
            self.listWidget.insertItem(0,query) 
                    
            now = QTime.currentTime()
            now = now.toString('hh:mm:ss')
            query = "[" + now + "] CONFIG 파일 확인 완료"
            self.listWidget.insertItem(0,query)

                
        except FileNotFoundError  and serial.SerialException:
            now = QTime.currentTime()
            now = now.toString('hh:mm:ss')
            query = "[" + now + "] CONFIG 파일 확인 실패"
            self.listWidget.insertItem(0,query)
        except AttributeError:
            now = QTime.currentTime()
            now = now.toString('hh:mm:ss')
            query = "[" + now + "] CONFIG 파일 확인 실패"
            self.listWidget.insertItem(0,query)


    def config_save(self):
        try:
            self.ser.write("config_save".encode())
            time.sleep(0.1)

            self.delay_time = self.lineEdit_3.text()
            self.led_rate = self.lineEdit_5.text()
            self.led_count = self.lineEdit_2.text()
            self.pump_pwm = self.lineEdit_4.text()


            self.ser.write((str(self.delay_time)+" "+str(self.led_rate)+" "+str(self.led_count)+" "+str(self.pump_pwm)).encode())
                    
            now = QTime.currentTime()
            now = now.toString('hh:mm:ss')
            query = "[" + now + "] CONFIG 파일 전송 성공"
            self.listWidget.insertItem(0,query)
        
            
        except FileNotFoundError  and serial.SerialException:
            now = QTime.currentTime()
            now = now.toString('hh:mm:ss')
            query = "[" + now + "] CONFIG 파일 전송 실패"
            self.listWidget.insertItem(0,query)
        except AttributeError:
            now = QTime.currentTime()
            now = now.toString('hh:mm:ss')
            query = "[" + now + "] CONFIG 파일 전송 실패"
            self.listWidget.insertItem(0,query)


    def data_name(self):
        try:
            self.ser.write("data_name".encode())
            time.sleep(0.1)

            
            p = self.ser.readline().decode('utf-8')
            #print(p)
            p_2 = p.split()
            p_2.reverse()

            for i in range(len(p_2)):
                #print(str(p_2[i]))
                query = str(p_2[i])
                self.listWidget.insertItem(0,query)

            now = QTime.currentTime()
            now = now.toString('hh:mm:ss')
            query = "[" + now + "] 로깅파일 이름 출력완료"
            self.listWidget.insertItem(0,query)






        except FileNotFoundError  and serial.SerialException:
            now = QTime.currentTime()
            now = now.toString('hh:mm:ss')
            query = "[" + now + "] 로깅파일 이름 출력실패"
            self.listWidget.insertItem(0,query)
        except AttributeError:
            now = QTime.currentTime()
            now = now.toString('hh:mm:ss')
            query = "[" + now + "] 로깅파일 이름 출력실패"
            self.listWidget.insertItem(0,query)


    def file_open(self):
        
        self.filename = QFileDialog.getExistingDirectory(MainWindow, 'Select Directory')
        if(self.filename == ""):
            now = QTime.currentTime()
            now = now.toString('hh:mm:ss')
            query = "[" + now + "] 경로를 다시확인해주세요"
            self.listWidget.insertItem(0,query)

        else:
            query = self.filename
            self.listWidget.insertItem(0,query)
            now = QTime.currentTime()
            now = now.toString('hh:mm:ss')
            query = "[" + now + "] 파일 저장경로 설정완료"
            self.listWidget.insertItem(0,query)

    def file_download(self):
        
        try:
            if(self.th_number == 1):
                self.widget_listname = self.listWidget.currentItem().text()
                if "logging" in self.widget_listname:
                    self.ser.write("data_transfer".encode())
                    time.sleep(0.1)
                    self.ser.write(self.widget_listname.encode())
                    t_number=1
                    t_number_2 = 0
                    while t_number:
                        time.sleep(0.5)
                        
                        f = open(self.filename + "/" + self.widget_listname + ".txt",'w')
                        f.close()
                        while True:
                            self.logging_string = str(self.ser.readline().decode('utf-8'))
                            f = open(self.filename + "/" + self.widget_listname + ".txt",'a')
                            if not (self.logging_string=="END"):
                                if (self.th_number == 1):
                                    f.write((str(self.logging_string)).strip())
                                    f.write("\n")
                                    if t_number_2 == 0:
                                        query = self.filename + "/" + self.widget_listname + ".txt"
                                        self.listWidget.insertItem(0,query)
                                        now = QTime.currentTime()
                                        now = now.toString('hh:mm:ss')
                                        query = "[" + now + "]"+" 로깅 파일 저장시작"
                                        self.listWidget.insertItem(0,query)
                                        t_number_2 = 1
                            else:
                                f.close()
                                query = self.filename + "/" + self.widget_listname + ".txt"
                                self.listWidget.insertItem(0,query)
                                now = QTime.currentTime()
                                now = now.toString('hh:mm:ss')
                                query = "[" + now + "] 로깅 파일 저장완료"
                                self.listWidget.insertItem(0,query)
                                t_number = 0
                                self.k_list.clear()
                                self.th_number = 0
                                   

                                break






                            
                else:
                    now = QTime.currentTime()
                    now = now.toString('hh:mm:ss')
                    query = "[" + now + "] 다시확인해주세요"
                    self.listWidget.insertItem(0,query)
                    

    
            
            
##            self.file_list_2 = []
##            self.file_list_2 = self.file_list[0].split("\n")
##            
##            f = open("./logging_file/"+self.widget_listname,'w')
##            for u in range(len(self.file_list_2)):
##                f.write(self.file_list_2[u])
##                f.write("\n")
##            f.close()
            
##            f = open("./logging_file/"+self.widget_listname,'w')
##            for u in range(len(self.file_list)-1):
##                f.write(self.file_list[u])
            

            

            
        except AttributeError as e:
            now = QTime.currentTime()
            now = now.toString('hh:mm:ss')
            query = "[" + now + "] 다시확인해주세요"
            self.listWidget.insertItem(0,query)
            





    def th(self):
        self.th_number = 1
        if self.th_number == 1:
            th = threading.Thread(target = self.file_download)
            th.deamon = True
            th.start()



    
            
            


    def led_control(self):
        try:
            self.ser.write("led_control".encode())
            time.sleep(0.1)
            self.led_control_value = self.lineEdit_6.text()
            self.ser.write(self.led_control_value.encode())
            

            now = QTime.currentTime()
            now = now.toString('hh:mm:ss')
            query = "[" + now + "] LED 밝기 :" + str(self.led_control_value)+ "% 출력완료"
            self.listWidget.insertItem(0,query)






        except FileNotFoundError  and serial.SerialException:
            now = QTime.currentTime()
            now = now.toString('hh:mm:ss')
            query = "[" + now + "] 밝기 확인 실패"
            self.listWidget.insertItem(0,query)
        except AttributeError:
            now = QTime.currentTime()
            now = now.toString('hh:mm:ss')
            query = "[" + now + "] 밝기 확인 실패"
            self.listWidget.insertItem(0,query)


    def led_stop(self):
        try:
            self.ser.write("led_control".encode())
            time.sleep(0.1)
            self.led_control_value = "0"
            self.ser.write(self.led_control_value.encode())
            

            now = QTime.currentTime()
            now = now.toString('hh:mm:ss')
            query = "[" + now + "] LED 끄기 완료"
            self.listWidget.insertItem(0,query)

        except FileNotFoundError  and serial.SerialException:
            now = QTime.currentTime()
            now = now.toString('hh:mm:ss')
            query = "[" + now + "] 밝기 멈춤 실패"
            self.listWidget.insertItem(0,query)
        except AttributeError:
            now = QTime.currentTime()
            now = now.toString('hh:mm:ss')
            query = "[" + now + "] 밝기 멈춤 실패"
            self.listWidget.insertItem(0,query)


    def motor_pwm_control(self):
        try:
            self.ser.write("motor_pwm_control".encode())
            time.sleep(0.1)
            self.led_control_value = self.lineEdit_8.text()
            self.ser.write(self.led_control_value.encode())
            

            now = QTime.currentTime()
            now = now.toString('hh:mm:ss')
            query = "[" + now + "] 모터 PWM :" + str(self.led_control_value)+ "% 출력 완료"
            self.listWidget.insertItem(0,query)

        except FileNotFoundError  and serial.SerialException:
            now = QTime.currentTime()
            now = now.toString('hh:mm:ss')
            query = "[" + now + "] 모터 PWM 조절 실패"
            self.listWidget.insertItem(0,query)
        except AttributeError:
            now = QTime.currentTime()
            now = now.toString('hh:mm:ss')
            query = "[" + now + "] 모터 PWM 조절 실패"
            self.listWidget.insertItem(0,query)


    def motor_stop(self):
        try:
            self.ser.write("motor_pwm_control".encode())
            time.sleep(0.1)
            self.led_control_value = "0"
            self.ser.write(self.led_control_value.encode())
            

            now = QTime.currentTime()
            now = now.toString('hh:mm:ss')
            query = "[" + now + "] 모터 멈춤 완료"
            self.listWidget.insertItem(0,query)




        except FileNotFoundError  and serial.SerialException:
            now = QTime.currentTime()
            now = now.toString('hh:mm:ss')
            query = "[" + now + "] 모터 멈춤 실패"
            self.listWidget.insertItem(0,query)
        except AttributeError:
            now = QTime.currentTime()
            now = now.toString('hh:mm:ss')
            query = "[" + now + "] 모터 멈춤 실패"
            self.listWidget.insertItem(0,query)



    def led_pwm_save(self):
        try:
            self.ser.write("led_pwm_save".encode())
            time.sleep(0.1)
            self.led_control_value = self.lineEdit_7.text()
            self.ser.write(self.led_control_value.encode())
            

            now = QTime.currentTime()
            now = now.toString('hh:mm:ss')
            query = "[" + now + "] LED 밝기 :" + str(self.led_control_value)+ "% 변경 완료"
            self.listWidget.insertItem(0,query)






        except FileNotFoundError  and serial.SerialException:
            now = QTime.currentTime()
            now = now.toString('hh:mm:ss')
            query = "[" + now + "] 밝기 확인 실패"
            self.listWidget.insertItem(0,query)
        except AttributeError:
            now = QTime.currentTime()
            now = now.toString('hh:mm:ss')
            query = "[" + now + "] 밝기 확인 실패"
            self.listWidget.insertItem(0,query)


    def time_check(self):
        try:
            self.ser.write("time_check".encode())
            time.sleep(0.1)
            
            p = self.ser.readline().decode('utf-8')
            p_2 = p.split()

            now = QTime.currentTime()
            now = now.toString('hh:mm:ss')
            pico_time = str(p_2[0]) + "-" + str(p_2[1]) + "-" + str(p_2[2]) + " " + str(p_2[4]) + ":" + str(p_2[5]) + ":" + str(p_2[6]) 
            query = "[" + now + "] PICO 시간 확인\n" + pico_time
            self.listWidget.insertItem(0,query)


        except FileNotFoundError  and serial.SerialException:
            now = QTime.currentTime()
            now = now.toString('hh:mm:ss')
            query = "[" + now + "] 시간 확인 실패"
            self.listWidget.insertItem(0,query)
        except AttributeError:
            now = QTime.currentTime()
            now = now.toString('hh:mm:ss')
            query = "[" + now + "] 시간 확인 실패"
            self.listWidget.insertItem(0,query)

    def time_save(self):
        try:
            self.ser.write("time_save".encode())
            time.sleep(0.1)

            now_date = QDate.currentDate()

            now_year = now_date.toString('yy')
            now_month = now_date.toString('MM')
            now_day = now_date.toString('dd')
            now_weekday = now_date.dayOfWeek()
            now_weekday = format(now_weekday, '02')


            now_time = QTime.currentTime()

            now_hour = now_time.toString('hh')
            now_minute = now_time.toString('mm')            
            now_second = now_time.toString('ss')
            

            transfer_time_data = str(now_year) + " " + str(now_month) + " " + str(now_day) + " " + str(now_weekday) + " " + str(now_hour) + " " + str(now_minute) + " " + str(now_second)
            self.ser.write(transfer_time_data.encode())

            now = QTime.currentTime()
            now = now.toString('hh:mm:ss')
            query = "[" + now + "] 현재 시간으로 설정 완료"
            self.listWidget.insertItem(0,query)




        except FileNotFoundError  and serial.SerialException:
            now = QTime.currentTime()
            now = now.toString('hh:mm:ss')
            query = "[" + now + "] 시간 설정 실패"
            self.listWidget.insertItem(0,query)
        except AttributeError:
            now = QTime.currentTime()
            now = now.toString('hh:mm:ss')
            query = "[" + now + "] 시간 설정 실패"
            self.listWidget.insertItem(0,query)






if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
